// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod elastic {
  pub mod clock {

    #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      use super::super::super::_rt;
      /// Error types
      #[derive(Clone)]
      pub enum ClockError {
        SystemTimeError(_rt::String),
        TimezoneError(_rt::String),
        MonotonicClockError(_rt::String),
      }
      impl ::core::fmt::Debug for ClockError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            ClockError::SystemTimeError(e) => {
              f.debug_tuple("ClockError::SystemTimeError").field(e).finish()
            }
            ClockError::TimezoneError(e) => {
              f.debug_tuple("ClockError::TimezoneError").field(e).finish()
            }
            ClockError::MonotonicClockError(e) => {
              f.debug_tuple("ClockError::MonotonicClockError").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for ClockError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }

      impl std::error::Error for ClockError {}

    }

  }
}
#[allow(dead_code, clippy::all)]
pub mod exports {
  pub mod elastic {
    pub mod clock {

      #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
      pub mod clock {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        pub type ClockError = super::super::super::super::elastic::clock::types::ClockError;
        #[doc(hidden)]
        #[allow(non_snake_case)]
        pub unsafe fn _export_read_current_time_cabi<T: Guest>() -> *mut u8 {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result0 = T::read_current_time();
        let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
        match result0 {
          Ok(e) => { {
            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
            *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
          } },
          Err(e) => { {
            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
            use super::super::super::super::elastic::clock::types::ClockError as V5;
            match e {
              V5::SystemTimeError(e) => {
                *ptr1.add(8).cast::<u8>() = (0i32) as u8;
                let vec2 = (e.into_bytes()).into_boxed_slice();
                let ptr2 = vec2.as_ptr().cast::<u8>();
                let len2 = vec2.len();
                ::core::mem::forget(vec2);
                *ptr1.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                *ptr1.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr2.cast_mut();
              },
              V5::TimezoneError(e) => {
                *ptr1.add(8).cast::<u8>() = (1i32) as u8;
                let vec3 = (e.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr().cast::<u8>();
                let len3 = vec3.len();
                ::core::mem::forget(vec3);
                *ptr1.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                *ptr1.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr3.cast_mut();
              },
              V5::MonotonicClockError(e) => {
                *ptr1.add(8).cast::<u8>() = (2i32) as u8;
                let vec4 = (e.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr().cast::<u8>();
                let len4 = vec4.len();
                ::core::mem::forget(vec4);
                *ptr1.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                *ptr1.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
              },
            }
          } },
        };ptr1
      }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn __post_return_read_current_time<T: Guest>(arg0: *mut u8,) {
        let l0 = i32::from(*arg0.add(0).cast::<u8>());
        match l0 {
          0 => (),
          _ => {
            let l1 = i32::from(*arg0.add(8).cast::<u8>());
            match l1 {
              0 => {
                let l2 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                let l3 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
                _rt::cabi_dealloc(l2, l3, 1);
              },
              1 => {
                let l4 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                let l5 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
                _rt::cabi_dealloc(l4, l5, 1);
              },
              _ => {
                let l6 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
                let l7 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
                _rt::cabi_dealloc(l6, l7, 1);
              },
            }
          },
        }
      }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn _export_read_timezone_cabi<T: Guest>() -> *mut u8 {#[cfg(target_arch="wasm32")]
      _rt::run_ctors_once();let result0 = T::read_timezone();
      let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
      match result0 {
        Ok(e) => { {
          *ptr1.add(0).cast::<u8>() = (0i32) as u8;
          let vec2 = (e.into_bytes()).into_boxed_slice();
          let ptr2 = vec2.as_ptr().cast::<u8>();
          let len2 = vec2.len();
          ::core::mem::forget(vec2);
          *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
          *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr2.cast_mut();
        } },
        Err(e) => { {
          *ptr1.add(0).cast::<u8>() = (1i32) as u8;
          use super::super::super::super::elastic::clock::types::ClockError as V6;
          match e {
            V6::SystemTimeError(e) => {
              *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
              let vec3 = (e.into_bytes()).into_boxed_slice();
              let ptr3 = vec3.as_ptr().cast::<u8>();
              let len3 = vec3.len();
              ::core::mem::forget(vec3);
              *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
              *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr3.cast_mut();
            },
            V6::TimezoneError(e) => {
              *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
              let vec4 = (e.into_bytes()).into_boxed_slice();
              let ptr4 = vec4.as_ptr().cast::<u8>();
              let len4 = vec4.len();
              ::core::mem::forget(vec4);
              *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
              *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
            },
            V6::MonotonicClockError(e) => {
              *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (2i32) as u8;
              let vec5 = (e.into_bytes()).into_boxed_slice();
              let ptr5 = vec5.as_ptr().cast::<u8>();
              let len5 = vec5.len();
              ::core::mem::forget(vec5);
              *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len5;
              *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr5.cast_mut();
            },
          }
        } },
      };ptr1
    }
    #[doc(hidden)]
    #[allow(non_snake_case)]
    pub unsafe fn __post_return_read_timezone<T: Guest>(arg0: *mut u8,) {
      let l0 = i32::from(*arg0.add(0).cast::<u8>());
      match l0 {
        0 => {
          let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l2 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l1, l2, 1);
        },
        _ => {
          let l3 = i32::from(*arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>());
          match l3 {
            0 => {
              let l4 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
              let l5 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
              _rt::cabi_dealloc(l4, l5, 1);
            },
            1 => {
              let l6 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
              let l7 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
              _rt::cabi_dealloc(l6, l7, 1);
            },
            _ => {
              let l8 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
              let l9 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
              _rt::cabi_dealloc(l8, l9, 1);
            },
          }
        },
      }
    }
    #[doc(hidden)]
    #[allow(non_snake_case)]
    pub unsafe fn _export_start_monotonic_cabi<T: Guest>() -> *mut u8 {#[cfg(target_arch="wasm32")]
    _rt::run_ctors_once();let result0 = T::start_monotonic();
    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
    match result0 {
      Ok(_) => { {
        *ptr1.add(0).cast::<u8>() = (0i32) as u8;
      } },
      Err(e) => { {
        *ptr1.add(0).cast::<u8>() = (1i32) as u8;
        use super::super::super::super::elastic::clock::types::ClockError as V5;
        match e {
          V5::SystemTimeError(e) => {
            *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (0i32) as u8;
            let vec2 = (e.into_bytes()).into_boxed_slice();
            let ptr2 = vec2.as_ptr().cast::<u8>();
            let len2 = vec2.len();
            ::core::mem::forget(vec2);
            *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
            *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr2.cast_mut();
          },
          V5::TimezoneError(e) => {
            *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (1i32) as u8;
            let vec3 = (e.into_bytes()).into_boxed_slice();
            let ptr3 = vec3.as_ptr().cast::<u8>();
            let len3 = vec3.len();
            ::core::mem::forget(vec3);
            *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
            *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr3.cast_mut();
          },
          V5::MonotonicClockError(e) => {
            *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<u8>() = (2i32) as u8;
            let vec4 = (e.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr().cast::<u8>();
            let len4 = vec4.len();
            ::core::mem::forget(vec4);
            *ptr1.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
            *ptr1.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
          },
        }
      } },
    };ptr1
  }
  #[doc(hidden)]
  #[allow(non_snake_case)]
  pub unsafe fn __post_return_start_monotonic<T: Guest>(arg0: *mut u8,) {
    let l0 = i32::from(*arg0.add(0).cast::<u8>());
    match l0 {
      0 => (),
      _ => {
        let l1 = i32::from(*arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>());
        match l1 {
          0 => {
            let l2 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l3 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l2, l3, 1);
          },
          1 => {
            let l4 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l5 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l4, l5, 1);
          },
          _ => {
            let l6 = *arg0.add(2*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
            let l7 = *arg0.add(3*::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l6, l7, 1);
          },
        }
      },
    }
  }
  #[doc(hidden)]
  #[allow(non_snake_case)]
  pub unsafe fn _export_stop_monotonic_cabi<T: Guest>() -> *mut u8 {#[cfg(target_arch="wasm32")]
  _rt::run_ctors_once();let result0 = T::stop_monotonic();
  let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
  match result0 {
    Ok(e) => { {
      *ptr1.add(0).cast::<u8>() = (0i32) as u8;
      *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
    } },
    Err(e) => { {
      *ptr1.add(0).cast::<u8>() = (1i32) as u8;
      use super::super::super::super::elastic::clock::types::ClockError as V5;
      match e {
        V5::SystemTimeError(e) => {
          *ptr1.add(8).cast::<u8>() = (0i32) as u8;
          let vec2 = (e.into_bytes()).into_boxed_slice();
          let ptr2 = vec2.as_ptr().cast::<u8>();
          let len2 = vec2.len();
          ::core::mem::forget(vec2);
          *ptr1.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
          *ptr1.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr2.cast_mut();
        },
        V5::TimezoneError(e) => {
          *ptr1.add(8).cast::<u8>() = (1i32) as u8;
          let vec3 = (e.into_bytes()).into_boxed_slice();
          let ptr3 = vec3.as_ptr().cast::<u8>();
          let len3 = vec3.len();
          ::core::mem::forget(vec3);
          *ptr1.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
          *ptr1.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr3.cast_mut();
        },
        V5::MonotonicClockError(e) => {
          *ptr1.add(8).cast::<u8>() = (2i32) as u8;
          let vec4 = (e.into_bytes()).into_boxed_slice();
          let ptr4 = vec4.as_ptr().cast::<u8>();
          let len4 = vec4.len();
          ::core::mem::forget(vec4);
          *ptr1.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
          *ptr1.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
        },
      }
    } },
  };ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_stop_monotonic<T: Guest>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(8).cast::<u8>());
      match l1 {
        0 => {
          let l2 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l3 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
        1 => {
          let l4 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l5 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l4, l5, 1);
        },
        _ => {
          let l6 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l7 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l6, l7, 1);
        },
      }
    },
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_read_monotonic_cabi<T: Guest>() -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::read_monotonic();
let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
match result0 {
  Ok(e) => { {
    *ptr1.add(0).cast::<u8>() = (0i32) as u8;
    *ptr1.add(8).cast::<i64>() = _rt::as_i64(e);
  } },
  Err(e) => { {
    *ptr1.add(0).cast::<u8>() = (1i32) as u8;
    use super::super::super::super::elastic::clock::types::ClockError as V5;
    match e {
      V5::SystemTimeError(e) => {
        *ptr1.add(8).cast::<u8>() = (0i32) as u8;
        let vec2 = (e.into_bytes()).into_boxed_slice();
        let ptr2 = vec2.as_ptr().cast::<u8>();
        let len2 = vec2.len();
        ::core::mem::forget(vec2);
        *ptr1.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
        *ptr1.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr2.cast_mut();
      },
      V5::TimezoneError(e) => {
        *ptr1.add(8).cast::<u8>() = (1i32) as u8;
        let vec3 = (e.into_bytes()).into_boxed_slice();
        let ptr3 = vec3.as_ptr().cast::<u8>();
        let len3 = vec3.len();
        ::core::mem::forget(vec3);
        *ptr1.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
        *ptr1.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr3.cast_mut();
      },
      V5::MonotonicClockError(e) => {
        *ptr1.add(8).cast::<u8>() = (2i32) as u8;
        let vec4 = (e.into_bytes()).into_boxed_slice();
        let ptr4 = vec4.as_ptr().cast::<u8>();
        let len4 = vec4.len();
        ::core::mem::forget(vec4);
        *ptr1.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
        *ptr1.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr4.cast_mut();
      },
    }
  } },
};ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_read_monotonic<T: Guest>(arg0: *mut u8,) {
  let l0 = i32::from(*arg0.add(0).cast::<u8>());
  match l0 {
    0 => (),
    _ => {
      let l1 = i32::from(*arg0.add(8).cast::<u8>());
      match l1 {
        0 => {
          let l2 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l3 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l2, l3, 1);
        },
        1 => {
          let l4 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l5 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l4, l5, 1);
        },
        _ => {
          let l6 = *arg0.add(8+1*::core::mem::size_of::<*const u8>()).cast::<*mut u8>();
          let l7 = *arg0.add(8+2*::core::mem::size_of::<*const u8>()).cast::<usize>();
          _rt::cabi_dealloc(l6, l7, 1);
        },
      }
    },
  }
}
pub trait Guest {
  /// Main clock interface
  /// Read current time as seconds since UNIX epoch
  fn read_current_time() -> Result<u64,ClockError>;
  /// Read current timezone
  fn read_timezone() -> Result<_rt::String,ClockError>;
  /// Start monotonic clock measurement
  fn start_monotonic() -> Result<(),ClockError>;
  /// Stop monotonic clock and return elapsed time in milliseconds
  fn stop_monotonic() -> Result<u64,ClockError>;
  /// Read elapsed time from monotonic clock in milliseconds without stopping it
  fn read_monotonic() -> Result<u64,ClockError>;
}
#[doc(hidden)]

macro_rules! __export_elastic_clock_clock_0_1_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "elastic:clock/clock@0.1.0#read-current-time")]
    unsafe extern "C" fn export_read_current_time() -> *mut u8 {
      unsafe { $($path_to_types)*::_export_read_current_time_cabi::<$ty>() }
    }
    #[unsafe(export_name = "cabi_post_elastic:clock/clock@0.1.0#read-current-time")]
    unsafe extern "C" fn _post_return_read_current_time(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_read_current_time::<$ty>(arg0) }
    }
    #[unsafe(export_name = "elastic:clock/clock@0.1.0#read-timezone")]
    unsafe extern "C" fn export_read_timezone() -> *mut u8 {
      unsafe { $($path_to_types)*::_export_read_timezone_cabi::<$ty>() }
    }
    #[unsafe(export_name = "cabi_post_elastic:clock/clock@0.1.0#read-timezone")]
    unsafe extern "C" fn _post_return_read_timezone(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_read_timezone::<$ty>(arg0) }
    }
    #[unsafe(export_name = "elastic:clock/clock@0.1.0#start-monotonic")]
    unsafe extern "C" fn export_start_monotonic() -> *mut u8 {
      unsafe { $($path_to_types)*::_export_start_monotonic_cabi::<$ty>() }
    }
    #[unsafe(export_name = "cabi_post_elastic:clock/clock@0.1.0#start-monotonic")]
    unsafe extern "C" fn _post_return_start_monotonic(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_start_monotonic::<$ty>(arg0) }
    }
    #[unsafe(export_name = "elastic:clock/clock@0.1.0#stop-monotonic")]
    unsafe extern "C" fn export_stop_monotonic() -> *mut u8 {
      unsafe { $($path_to_types)*::_export_stop_monotonic_cabi::<$ty>() }
    }
    #[unsafe(export_name = "cabi_post_elastic:clock/clock@0.1.0#stop-monotonic")]
    unsafe extern "C" fn _post_return_stop_monotonic(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_stop_monotonic::<$ty>(arg0) }
    }
    #[unsafe(export_name = "elastic:clock/clock@0.1.0#read-monotonic")]
    unsafe extern "C" fn export_read_monotonic() -> *mut u8 {
      unsafe { $($path_to_types)*::_export_read_monotonic_cabi::<$ty>() }
    }
    #[unsafe(export_name = "cabi_post_elastic:clock/clock@0.1.0#read-monotonic")]
    unsafe extern "C" fn _post_return_read_monotonic(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_read_monotonic::<$ty>(arg0) }
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_elastic_clock_clock_0_1_0_cabi;

#[repr(align(8))]
struct _RetArea([::core::mem::MaybeUninit::<u8>; 16+2*::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16+2*::core::mem::size_of::<*const u8>()]);

}

}
}
}
mod _rt {
  #![allow(dead_code, clippy::all)]
  pub use alloc_crate::string::String;

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  
  pub fn as_i64<T: AsI64>(t: T) -> i64 {
    t.as_i64()
  }

  pub trait AsI64 {
    fn as_i64(self) -> i64;
  }

  impl<'a, T: Copy + AsI64> AsI64 for &'a T {
    fn as_i64(self) -> i64 {
      (*self).as_i64()
    }
  }
  
  impl AsI64 for i64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  
  impl AsI64 for u64 {
    #[inline]
    fn as_i64(self) -> i64 {
      self as i64
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr, layout);
  }
  extern crate alloc as alloc_crate;
  pub use alloc_crate::alloc;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_clock_impl_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::elastic::clock::clock::__export_elastic_clock_clock_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::elastic::clock::clock);
  )
}
#[doc(inline)]
pub(crate) use __export_clock_impl_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:elastic:clock@0.1.0:clock-impl:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 488] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe7\x02\x01A\x02\x01\
A\x05\x01B\x02\x01q\x03\x11system-time-error\x01s\0\x0etimezone-error\x01s\0\x15\
monotonic-clock-error\x01s\0\x04\0\x0bclock-error\x03\0\0\x03\0\x19elastic:clock\
/types@0.1.0\x05\0\x02\x03\0\0\x0bclock-error\x01B\x0d\x02\x03\x02\x01\x01\x04\0\
\x0bclock-error\x03\0\0\x01j\x01w\x01\x01\x01@\0\0\x02\x04\0\x11read-current-tim\
e\x01\x03\x01j\x01s\x01\x01\x01@\0\0\x04\x04\0\x0dread-timezone\x01\x05\x01j\0\x01\
\x01\x01@\0\0\x06\x04\0\x0fstart-monotonic\x01\x07\x04\0\x0estop-monotonic\x01\x03\
\x04\0\x0eread-monotonic\x01\x03\x04\0\x19elastic:clock/clock@0.1.0\x05\x02\x04\0\
\x1eelastic:clock/clock-impl@0.1.0\x04\0\x0b\x10\x01\0\x0aclock-impl\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rus\
t\x060.41.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

