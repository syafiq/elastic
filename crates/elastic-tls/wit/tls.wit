package elastic:tls

/// TLS error types that can occur during operations
interface types {
    /// Error variants that can occur during TLS operations
    variant error {
        /// Invalid or malformed certificate
        invalid-certificate(string),
        /// Invalid or malformed private key
        invalid-key(string),
        /// Connection establishment failed
        connection-failed(string),
        /// TLS handshake failed
        handshake-failed(string),
        /// Failed to write data
        write-failed(string),
        /// Failed to read data
        read-failed(string),
        /// Unsupported TLS protocol version
        unsupported-protocol(string),
        /// Unsupported cipher suite
        unsupported-cipher(string),
        /// Platform not supported
        platform-not-supported(string)
    }

    /// Supported TLS protocol versions
    variant version {
        /// TLS 1.2
        tls12,
        /// TLS 1.3
        tls13
    }

    /// Supported cipher suites
    variant cipher-suite {
        /// AES-128-GCM with SHA-256
        tls-aes128-gcm-sha256,
        /// AES-256-GCM with SHA-384
        tls-aes256-gcm-sha384,
        /// ChaCha20-Poly1305 with SHA-256
        tls-chacha20-poly1305-sha256
    }

    /// TLS configuration options
    record config {
        /// TLS protocol version to use
        version: version,
        /// List of cipher suites to support
        cipher-suites: list<cipher-suite>,
        /// Whether to verify peer certificates
        verify-peer: bool
    }
}

/// TLS interface for secure communication
interface tls {
    use types.{error, version, cipher-suite, config};

    /// Create a new TLS context
    constructor: func() -> result<handle, error>;
    
    /// Load a certificate from a file
    load-certificate: func(handle: handle, cert-path: string) -> result<unit, error>;
    
    /// Load a private key from a file
    load-private-key: func(handle: handle, key-path: string) -> result<unit, error>;
    
    /// Load CA certificates from a file
    load-ca-certificates: func(handle: handle, ca-path: string) -> result<unit, error>;

    /// Bind to a port for incoming connections
    bind: func(handle: handle, port: u16) -> result<unit, error>;
    
    /// Accept an incoming connection
    accept: func(handle: handle, config: config) -> result<u32, error>;
    
    /// Connect to a remote host
    connect: func(handle: handle, hostname: string, port: u16, config: config) -> result<u32, error>;
    
    /// Close a connection
    close: func(handle: handle, conn: u32) -> result<unit, error>;

    /// Write data to a connection
    write: func(handle: handle, conn: u32, data: list<u8>) -> result<unit, error>;
    
    /// Read data from a connection
    read: func(handle: handle, conn: u32, max-size: u32) -> result<list<u8>, error>;

    /// Get the peer's certificate
    get-peer-certificate: func(handle: handle, conn: u32) -> result<option<list<u8>>, error>;
    
    /// Get the negotiated protocol version
    get-protocol-version: func(handle: handle, conn: u32) -> result<version, error>;
    
    /// Get the negotiated cipher suite
    get-cipher-suite: func(handle: handle, conn: u32) -> result<cipher-suite, error>;
}

/// TLS implementation world
world tls-impl {
    export tls;
} 